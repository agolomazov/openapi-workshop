openapi: 3.0.0
info:
  title: todos-api-spec
  version: '1.0'
  description: API для работы с заметками
  contact:
    name: Anton Golomazov
    url: 'https://vk.com/agolomazov'
    email: cesear@bk.ru
  license:
    name: MIT
    url: 'https://mit.com'
servers:
  - url: 'http://netology.ru/backend/api/todos'
    description: Production
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: ID пользователя
    get:
      summary: Получение  пользователей по ID
      tags:
        - Пользователи
      responses:
        '200':
          description: Пользователь найден
          content:
            application/json:
              schema:
                $ref: ../models/User.yaml
              examples:
                ExampleMan:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    lastName: Viktor
                    firstName: Tsoy
                    birthDay: '2019-08-24'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/HttpError.yaml
      operationId: getUserByID
      description: Получение пользователей по ID
    patch:
      summary: Update User Information
      operationId: updateUser
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: ../models/User.yaml
              examples: {}
      description: Обновление данных о пользователе
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/User.yaml
            examples: {}
        description: Обновление свойств пользователя
      tags:
        - Пользователи
  /user:
    post:
      summary: Добавление пользователя
      operationId: createUser
      responses:
        '200':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: ../models/User.yaml
              examples: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/User.yaml
            examples: {}
        description: ''
      description: Добавление нового пользователя
      tags:
        - Пользователи
  /users:
    get:
      summary: Получение списка пользователей платформы
      tags:
        - Пользователи
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/User.yaml
      operationId: getUsers
      description: Получение доступных пользователе
components:
  schemas: {}
tags:
  - name: Пользователи
